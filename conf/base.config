/*
 * Base configuration with default settings for processes
 */

process {
    // Default container settings
    container = 'clinical-pipeline:latest'
    
    // Default resource requests
    cpus = { check_max(1 * task.attempt, 'cpus') }
    memory = { check_max(2.GB * task.attempt, 'memory') }
    time = { check_max(2.h * task.attempt, 'time') }
    
    // Process-specific settings
    withName: 'FASTQC' {
        container = 'nfcore/fastqc:0.11.9'
        cpus = { check_max(2, 'cpus') }
        memory = { check_max(4.GB, 'memory') }
    }
    
    withName: 'TRIM_READS' {
        container = 'staphb/trimgalore:0.6.7'
        cpus = { check_max(4, 'cpus') }
        memory = { check_max(8.GB, 'memory') }
    }
    
    withName: 'ALIGN_READS' {
        container = 'biocontainers/bwa:v0.7.17_cv1'
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(16.GB, 'memory') }
    }
    
    withName: 'CALL_VARIANTS' {
        container = 'broadinstitute/gatk:4.3.0.0'
        cpus = { check_max(8, 'cpus') }
        memory = { check_max(32.GB, 'memory') }
    }
    
    withName: 'ANNOTATE_VARIANTS' {
        container = 'ensemblorg/ensembl-vep:release_108.1'
        cpus = { check_max(4, 'cpus') }
        memory = { check_max(16.GB, 'memory') }
    }
}

// Function to enforce max resource limits
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "WARNING: Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "WARNING: Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "WARNING: Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
} 