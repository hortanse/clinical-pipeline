/*
========================================================================================
    Clinical Bioinformatics Pipeline - Configuration
========================================================================================
*/

manifest {
    name            = 'Clinical Bioinformatics Pipeline'
    author          = 'Your Organization'
    homePage        = 'https://github.com/hortanse/clinical-pipeline'
    description     = 'A clinical-grade genomics analysis pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '>=22.10.0'
    version         = '1.0.0'
}

// Default parameters
params {
    // Required parameters
    input           = null
    output          = 'results'
    genome          = 'GRCh38'
    
    // Optional parameters
    panel           = null
    ehr_integration = false
    email           = null
    
    // Compliance parameters
    phi_handling    = 'encrypted'
    audit_trail     = true
    
    // Resource allocation
    max_cpus        = 16
    max_memory      = '64.GB'
    max_time        = '24.h'
}

// Process-specific configurations
process {
    publishDir = [
        path: { "${params.output}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    
    errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 3
    maxErrors     = '-1'
}

// Profile configurations
profiles {
    standard {
        process.executor = 'local'
    }
    
    production {
        process.executor = 'slurm'
        params.audit_trail = true
        params.phi_handling = 'encrypted'
    }
    
    cloud {
        process.executor = 'awsbatch'
        process.queue = 'clinical-pipeline-queue'
        aws.region = 'us-east-1'
    }
    
    high_sensitivity {
        params.variant_caller = 'deepvariant'
        params.min_depth = 30
    }
}

// Include other configuration files
includeConfig 'conf/base.config'
includeConfig 'conf/resources.config'

// Include profile-specific configs if they exist
if (workflow.profile == 'production') {
    includeConfig 'conf/production.config'
}

// Load external config if provided
if (params.config_profile_description) {
    includeConfig params.config_profile_description
}

// Capture version information
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.output}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.output}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.output}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.output}/pipeline_info/pipeline_dag_${trace_timestamp}.svg"
}

// Function to ensure required parameters are supplied
def checkParams() {
    if (params.input == null) {
        exit 1, "Input sample sheet not specified!"
    }
} 